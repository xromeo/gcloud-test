/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gcloud.pubsub;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockOnHandNotification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6264533454486449531L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockOnHandNotification\",\"namespace\":\"gcloud.pubsub\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"tenant\",\"type\":\"string\"},{\"name\":\"siteCode\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"long\"},{\"name\":\"fileName\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"numberElements\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"StatusType\",\"symbols\":[\"STARTED\",\"FINISHED\",\"ABORTED\",\"FAILED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockOnHandNotification> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockOnHandNotification> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockOnHandNotification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockOnHandNotification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockOnHandNotification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockOnHandNotification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockOnHandNotification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockOnHandNotification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockOnHandNotification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence tenant;
  private java.lang.CharSequence siteCode;
  private long date;
  private java.lang.CharSequence fileName;
  private java.lang.CharSequence source;
  private int numberElements;
  private gcloud.pubsub.StatusType status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockOnHandNotification() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param tenant The new value for tenant
   * @param siteCode The new value for siteCode
   * @param date The new value for date
   * @param fileName The new value for fileName
   * @param source The new value for source
   * @param numberElements The new value for numberElements
   * @param status The new value for status
   */
  public StockOnHandNotification(java.lang.CharSequence id, java.lang.CharSequence tenant, java.lang.CharSequence siteCode, java.lang.Long date, java.lang.CharSequence fileName, java.lang.CharSequence source, java.lang.Integer numberElements, gcloud.pubsub.StatusType status) {
    this.id = id;
    this.tenant = tenant;
    this.siteCode = siteCode;
    this.date = date;
    this.fileName = fileName;
    this.source = source;
    this.numberElements = numberElements;
    this.status = status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return tenant;
    case 2: return siteCode;
    case 3: return date;
    case 4: return fileName;
    case 5: return source;
    case 6: return numberElements;
    case 7: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: tenant = (java.lang.CharSequence)value$; break;
    case 2: siteCode = (java.lang.CharSequence)value$; break;
    case 3: date = (java.lang.Long)value$; break;
    case 4: fileName = (java.lang.CharSequence)value$; break;
    case 5: source = (java.lang.CharSequence)value$; break;
    case 6: numberElements = (java.lang.Integer)value$; break;
    case 7: status = (gcloud.pubsub.StatusType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'tenant' field.
   * @return The value of the 'tenant' field.
   */
  public java.lang.CharSequence getTenant() {
    return tenant;
  }


  /**
   * Sets the value of the 'tenant' field.
   * @param value the value to set.
   */
  public void setTenant(java.lang.CharSequence value) {
    this.tenant = value;
  }

  /**
   * Gets the value of the 'siteCode' field.
   * @return The value of the 'siteCode' field.
   */
  public java.lang.CharSequence getSiteCode() {
    return siteCode;
  }


  /**
   * Sets the value of the 'siteCode' field.
   * @param value the value to set.
   */
  public void setSiteCode(java.lang.CharSequence value) {
    this.siteCode = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public long getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return The value of the 'fileName' field.
   */
  public java.lang.CharSequence getFileName() {
    return fileName;
  }


  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(java.lang.CharSequence value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'numberElements' field.
   * @return The value of the 'numberElements' field.
   */
  public int getNumberElements() {
    return numberElements;
  }


  /**
   * Sets the value of the 'numberElements' field.
   * @param value the value to set.
   */
  public void setNumberElements(int value) {
    this.numberElements = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public gcloud.pubsub.StatusType getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(gcloud.pubsub.StatusType value) {
    this.status = value;
  }

  /**
   * Creates a new StockOnHandNotification RecordBuilder.
   * @return A new StockOnHandNotification RecordBuilder
   */
  public static gcloud.pubsub.StockOnHandNotification.Builder newBuilder() {
    return new gcloud.pubsub.StockOnHandNotification.Builder();
  }

  /**
   * Creates a new StockOnHandNotification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockOnHandNotification RecordBuilder
   */
  public static gcloud.pubsub.StockOnHandNotification.Builder newBuilder(gcloud.pubsub.StockOnHandNotification.Builder other) {
    if (other == null) {
      return new gcloud.pubsub.StockOnHandNotification.Builder();
    } else {
      return new gcloud.pubsub.StockOnHandNotification.Builder(other);
    }
  }

  /**
   * Creates a new StockOnHandNotification RecordBuilder by copying an existing StockOnHandNotification instance.
   * @param other The existing instance to copy.
   * @return A new StockOnHandNotification RecordBuilder
   */
  public static gcloud.pubsub.StockOnHandNotification.Builder newBuilder(gcloud.pubsub.StockOnHandNotification other) {
    if (other == null) {
      return new gcloud.pubsub.StockOnHandNotification.Builder();
    } else {
      return new gcloud.pubsub.StockOnHandNotification.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockOnHandNotification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockOnHandNotification>
    implements org.apache.avro.data.RecordBuilder<StockOnHandNotification> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence tenant;
    private java.lang.CharSequence siteCode;
    private long date;
    private java.lang.CharSequence fileName;
    private java.lang.CharSequence source;
    private int numberElements;
    private gcloud.pubsub.StatusType status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gcloud.pubsub.StockOnHandNotification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.tenant)) {
        this.tenant = data().deepCopy(fields()[1].schema(), other.tenant);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.siteCode)) {
        this.siteCode = data().deepCopy(fields()[2].schema(), other.siteCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.fileName)) {
        this.fileName = data().deepCopy(fields()[4].schema(), other.fileName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.numberElements)) {
        this.numberElements = data().deepCopy(fields()[6].schema(), other.numberElements);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing StockOnHandNotification instance
     * @param other The existing instance to copy.
     */
    private Builder(gcloud.pubsub.StockOnHandNotification other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tenant)) {
        this.tenant = data().deepCopy(fields()[1].schema(), other.tenant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.siteCode)) {
        this.siteCode = data().deepCopy(fields()[2].schema(), other.siteCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fileName)) {
        this.fileName = data().deepCopy(fields()[4].schema(), other.fileName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numberElements)) {
        this.numberElements = data().deepCopy(fields()[6].schema(), other.numberElements);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant' field.
      * @return The value.
      */
    public java.lang.CharSequence getTenant() {
      return tenant;
    }


    /**
      * Sets the value of the 'tenant' field.
      * @param value The value of 'tenant'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setTenant(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tenant = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant' field has been set.
      * @return True if the 'tenant' field has been set, false otherwise.
      */
    public boolean hasTenant() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tenant' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearTenant() {
      tenant = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'siteCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSiteCode() {
      return siteCode;
    }


    /**
      * Sets the value of the 'siteCode' field.
      * @param value The value of 'siteCode'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setSiteCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.siteCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'siteCode' field has been set.
      * @return True if the 'siteCode' field has been set, false otherwise.
      */
    public boolean hasSiteCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'siteCode' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearSiteCode() {
      siteCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public long getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setDate(long value) {
      validate(fields()[3], value);
      this.date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileName() {
      return fileName;
    }


    /**
      * Sets the value of the 'fileName' field.
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setFileName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.fileName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fileName' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.source = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearSource() {
      source = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberElements' field.
      * @return The value.
      */
    public int getNumberElements() {
      return numberElements;
    }


    /**
      * Sets the value of the 'numberElements' field.
      * @param value The value of 'numberElements'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setNumberElements(int value) {
      validate(fields()[6], value);
      this.numberElements = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'numberElements' field has been set.
      * @return True if the 'numberElements' field has been set, false otherwise.
      */
    public boolean hasNumberElements() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'numberElements' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearNumberElements() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public gcloud.pubsub.StatusType getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder setStatus(gcloud.pubsub.StatusType value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public gcloud.pubsub.StockOnHandNotification.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockOnHandNotification build() {
      try {
        StockOnHandNotification record = new StockOnHandNotification();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tenant = fieldSetFlags()[1] ? this.tenant : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.siteCode = fieldSetFlags()[2] ? this.siteCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.date = fieldSetFlags()[3] ? this.date : (java.lang.Long) defaultValue(fields()[3]);
        record.fileName = fieldSetFlags()[4] ? this.fileName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.source = fieldSetFlags()[5] ? this.source : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.numberElements = fieldSetFlags()[6] ? this.numberElements : (java.lang.Integer) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (gcloud.pubsub.StatusType) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockOnHandNotification>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockOnHandNotification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockOnHandNotification>
    READER$ = (org.apache.avro.io.DatumReader<StockOnHandNotification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.tenant);

    out.writeString(this.siteCode);

    out.writeLong(this.date);

    out.writeString(this.fileName);

    out.writeString(this.source);

    out.writeInt(this.numberElements);

    out.writeEnum(this.status.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.tenant = in.readString(this.tenant instanceof Utf8 ? (Utf8)this.tenant : null);

      this.siteCode = in.readString(this.siteCode instanceof Utf8 ? (Utf8)this.siteCode : null);

      this.date = in.readLong();

      this.fileName = in.readString(this.fileName instanceof Utf8 ? (Utf8)this.fileName : null);

      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

      this.numberElements = in.readInt();

      this.status = gcloud.pubsub.StatusType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.tenant = in.readString(this.tenant instanceof Utf8 ? (Utf8)this.tenant : null);
          break;

        case 2:
          this.siteCode = in.readString(this.siteCode instanceof Utf8 ? (Utf8)this.siteCode : null);
          break;

        case 3:
          this.date = in.readLong();
          break;

        case 4:
          this.fileName = in.readString(this.fileName instanceof Utf8 ? (Utf8)this.fileName : null);
          break;

        case 5:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        case 6:
          this.numberElements = in.readInt();
          break;

        case 7:
          this.status = gcloud.pubsub.StatusType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










